// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSizes")
  colors Color[] @relation("StoreToColors")
  products Product[] @relation("StoreToProduct")
  orders Order[] @relation("StoreToOrder")
}

model Billboard {
  id        String @id @map("_id") @default(auto()) @db.ObjectId
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId   String @db.ObjectId
  store     Store @relation("StoreToBillboard", fields: [storeId], references: [id])

  categories Category[] @relation("CategoryToBillboard")
}

model Category {
    id        String @id @map("_id") @default(auto()) @db.ObjectId
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    storeId   String @db.ObjectId
    store    Store @relation("StoreToCategory" ,fields: [storeId], references: [id])

    billboardId String @db.ObjectId
    billboard Billboard @relation("CategoryToBillboard", fields: [billboardId], references: [id])

    products Product[] @relation("CategoryToProduct")
}

model Size {
  id        String @id @map("_id") @default(auto()) @db.ObjectId
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId  String @db.ObjectId
  store    Store @relation("StoreToSizes", fields: [storeId], references: [id])

  products Product[] @relation("SizeToProduct")
  }

model Color {
  id        String @id @map("_id") @default(auto()) @db.ObjectId
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId  String @db.ObjectId
  store    Store @relation("StoreToColors", fields: [storeId], references: [id])
 
  products Product[] @relation("ColorToProduct")
}

model Product {
  id       String @id @map("_id") @default(auto()) @db.ObjectId
  name     String
  price    Float
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sizeId   String @db.ObjectId
  size    Size @relation("SizeToProduct", fields: [sizeId], references: [id])

  storeId String @db.ObjectId
  store   Store @relation("StoreToProduct",fields: [storeId], references: [id])

  categoryId String @db.ObjectId
  category   Category @relation("CategoryToProduct",fields: [categoryId], references: [id])

  colorId String @db.ObjectId
  color   Color @relation("ColorToProduct",fields: [colorId], references: [id])


  images Image[] @relation("ProductToImage")

  orderProducts OrderItems[] @relation("OrderToProduct")
  }

model Image {
  id        String @id @map("_id") @default(auto()) @db.ObjectId
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  productId String @db.ObjectId
  product   Product @relation("ProductToImage",fields: [productId], references: [id], onDelete: Cascade) 
}

model Order {
  id        String @id @map("_id") @default(auto()) @db.ObjectId
  isPaid    Boolean @default(false)
  phone     String @default("")
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String @db.ObjectId
  store   Store @relation("StoreToOrder",fields: [storeId], references: [id])

  orderItems OrderItems[] @relation("OrderToProduct")

}

model OrderItems {
  id        String @id @map("_id") @default(auto()) @db.ObjectId

  orderId String @db.ObjectId
  order   Order @relation("OrderToProduct",fields: [orderId], references: [id])

  productId String @db.ObjectId
  product   Product @relation("OrderToProduct",fields: [productId], references: [id])
}